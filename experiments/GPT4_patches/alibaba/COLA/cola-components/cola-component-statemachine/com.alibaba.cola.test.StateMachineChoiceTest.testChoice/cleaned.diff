@@ -17,6 +17,31 @@ public class StateMachineChoiceTest {
     }

     /**
+     * Creates a StateMachine instance with configured transitions and conditions.
+     */
+    private StateMachine<StateMachineTest.States, StateMachineTest.Events, Context> createStateMachine() {
+        StateMachineBuilder<StateMachineTest.States, StateMachineTest.Events, Context> builder = StateMachineBuilderFactory.create();
+        builder.internalTransition()
+                .within(StateMachineTest.States.STATE1)
+                .on(StateMachineTest.Events.EVENT1)
+                .when(checkCondition1())
+                .perform(doAction());
+        builder.externalTransition()
+                .from(StateMachineTest.States.STATE1)
+                .to(StateMachineTest.States.STATE2)
+                .on(StateMachineTest.Events.EVENT1)
+                .when(checkCondition2())
+                .perform(doAction());
+        builder.externalTransition()
+                .from(StateMachineTest.States.STATE1)
+                .to(StateMachineTest.States.STATE3)
+                .on(StateMachineTest.Events.EVENT1)
+                .when(checkCondition3())
+                .perform(doAction());
+        return builder.build("ChoiceConditionMachine"+System.currentTimeMillis());
+    }
+
+    /**
      * 测试选择分支，针对同一个事件：EVENT1
      * if condition == "1", STATE1 --> STATE1
      * if condition == "2" , STATE1 --> STATE2
@@ -28,30 +35,14 @@ public class StateMachineChoiceTest {
      */
     @Test
     public void testChoice(){
-        StateMachineBuilder<StateMachineTest.States, StateMachineTest.Events, Context> builder = StateMachineBuilderFactory.create();
-        builder.internalTransition()
-            .within(StateMachineTest.States.STATE1)
-            .on(StateMachineTest.Events.EVENT1)
-            .when(checkCondition1())
-            .perform(doAction());
-        builder.externalTransition()
-            .from(StateMachineTest.States.STATE1)
-            .to(StateMachineTest.States.STATE2)
-            .on(StateMachineTest.Events.EVENT1)
-            .when(checkCondition2())
-            .perform(doAction());
-        builder.externalTransition()
-            .from(StateMachineTest.States.STATE1)
-            .to(StateMachineTest.States.STATE3)
-            .on(StateMachineTest.Events.EVENT1)
-            .when(checkCondition3())
-            .perform(doAction());

-        StateMachine<StateMachineTest.States, StateMachineTest.Events, Context> stateMachine = builder.build("ChoiceConditionMachine");
+        StateMachine<StateMachineTest.States, StateMachineTest.Events, Context> stateMachine = createStateMachine();
         StateMachineTest.States target1 = stateMachine.fireEvent(StateMachineTest.States.STATE1, StateMachineTest.Events.EVENT1, new Context("1"));
         Assert.assertEquals(StateMachineTest.States.STATE1,target1);
-        StateMachineTest.States target2 = stateMachine.fireEvent(StateMachineTest.States.STATE1, StateMachineTest.Events.EVENT1, new Context("2"));
+        stateMachine = createStateMachine();
+        StateMachineTest.States target2 = stateMachine.fireEvent(StateMachineTest.States.STATE1, StateMachineTest.Events.EVENT1, new Context("2"));
         Assert.assertEquals(StateMachineTest.States.STATE2,target2);
-        StateMachineTest.States target3 = stateMachine.fireEvent(StateMachineTest.States.STATE1, StateMachineTest.Events.EVENT1, new Context("3"));
+        stateMachine = createStateMachine();
+        StateMachineTest.States target3 = stateMachine.fireEvent(StateMachineTest.States.STATE1, StateMachineTest.Events.EVENT1, new Context("3"));
         Assert.assertEquals(StateMachineTest.States.STATE3,target3);
     }