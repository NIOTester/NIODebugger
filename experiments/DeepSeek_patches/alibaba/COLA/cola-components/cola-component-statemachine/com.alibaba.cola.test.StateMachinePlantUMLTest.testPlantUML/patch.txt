To make the test more idempotent, we need to ensure that the same event does not attempt to generate a state machine with an existent ID.

Here's the modified test:

```java
package com.alibaba.cola.test;

/**
 * StateMachinePlantUMLTest
 *
 * @author Frank Zhang
 * @date 2020-02-09 7:53 PM
 */
public class StateMachinePlantUMLTest {

    @Before
    public void init() {
        Debugger.enableDebug();
    }

    @Test
    public void testPlantUML() {
        StateMachineBuilder<PriceAdjustmentTaskStatusEnum, PriceAdjustmentTaskEventEnum, StateMachineTest.Context> builder = StateMachineBuilderFactory.create();
        builder.externalTransition()
                .from(None)
                .to(Supplier_Processing)
                .on(Create)
                .when(checkCondition())
                .perform(doAction());
        // 商家调价
        Stream.of(Supplier_Processing, Supplier_Manager_Processing, Price_Manager_Processing)
                .forEach(status ->
                        builder.externalTransition()
                                .from(status)
                                .to(Closed)
                                .on(Supplier_Agree)
                                .when(checkCondition())
                                .perform(doAction())
                );
        // 商家 -上升至-> 控商小二
        builder.externalTransition()
                .from(Supplier_Processing)
                .to(Supplier_Manager_Processing)
                .on(Supplier_Reject)
                .when(checkCondition())
                .perform(doAction());
        builder.externalTransition()
                .from(Supplier_Processing)
                .to(Supplier_Manager_Processing)
                .on(Supplier_Timeout)
                .when(checkCondition())
                .perform(doAction());
        // 申请申请高于P0售卖
        builder.externalTransition()
                .from(Supplier_Manager_Processing)
                .to(Price_Manager_Processing)
                .on(Apply_Over_P0_Sell)
                .when(checkCondition())
                .perform(doAction());
        // 同意高于P0价售卖
        builder.externalTransition()
                .from(Price_Manager_Processing)
                .to(Closed)
                .on(Agree_Over_P0_Sell)
                .when(checkCondition())
                .perform(doAction());
        // 拒绝高于P0价售卖
        builder.externalTransition()
                .from(Price_Manager_Processing)
                .to(Supplier_Manager_Processing)
                .on(Reject_Over_P0_Sell)
                .when(checkCondition())
                .perform(doAction());
        // 普通字段更新事件
        Stream.of(Supplier_Processing, Supplier_Manager_Processing, Price_Manager_Processing)
                .forEach(status -> builder
                        .internalTransition()
                        .within(status)
                        .on(Normal_Update)
                        .when(checkCondition())
                        .perform(doAction())
                );
        // P0价变更事件、页面价高于合理价事件
        Stream.of(P0_Changed, Page_Price_changed)
                .forEach(event -> builder.externalTransitions()
                        .fromAmong(Supplier_Processing, Supplier_Manager_Processing, Price_Manager_Processing)
                        .to(Closed)
                        .on(event)
                        .when(checkCondition())
                        .perform(doAction()));
        
        // Ensure each created state machine has a unique ID.
        StateMachine stateMachine = builder.build("AdjustPriceTask" + "_" + java.util.UUID.randomUUID().toString());
        String plantUML = stateMachine.generatePlantUML();
        System.out.println(plantUML);
    }

    private Condition<StateMachineTest.Context> checkCondition() {
        return (ctx) -> {
            return true;
        };
    }

    private Action<PriceAdjustmentTaskStatusEnum, PriceAdjustmentTaskEventEnum, StateMachineTest.Context> doAction() {
        return (from, to, event, ctx) -> {
            System.out.println(ctx.operator + " is operating " + ctx.entityId + " from:" + from + " to:" + to + " on:" + event);
        };
    }
}
```

### Explanation:
1. **Unique ID**: We create a unique ID of the new `StateMachine` using `java.util.UUID.randomUUID()`.
2. **Build State Machine**: We build the state machine with the original name suffixed with the unique ID, ensuring test idempotence.
