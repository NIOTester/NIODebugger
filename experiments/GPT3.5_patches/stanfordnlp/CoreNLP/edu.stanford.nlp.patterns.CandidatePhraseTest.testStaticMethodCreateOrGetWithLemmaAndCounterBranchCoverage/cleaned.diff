@@ -34,30 +34,33 @@
 
   @Test
   public void testStaticMethodCreateOrGetWithLemmaAndCounterBranchCoverage() {
-    //get branch
-    //emptyFeatures
+    // Testing the "emptyFeatures" branch
     CandidatePhrase.createOrGet("run", "runs");
 
     Counter<String> counterA = new ClassicCounter<>();
     counterA.setCount("a", 1.0);
     Assert.assertEquals(counterA.size(), 1);
 
+    // Testing the creation of a CandidatePhrase with a Counter
     CandidatePhrase candidatePhrase = CandidatePhrase.createOrGet("run", "runs", counterA);
     Assert.assertEquals(candidatePhrase.getFeatures().size(), 1);
     Assert.assertEquals(candidatePhrase.getPhrase(), "run");
     Assert.assertEquals(candidatePhrase.getPhraseLemma(), "runs");
 
-    //create branch
+    // Testing a new branch creation with multiple features
     Counter<String> counterPQRS = new ClassicCounter<>();
     counterPQRS.setCount("p", 1.0);
     counterPQRS.setCount("q", 2.0);
     counterPQRS.setCount("r", 3.0);
     counterPQRS.setCount("s", 4.0);
-    //Create branch
+
+    // Creating a CandidatePhrase for a new phrase "fight"
     candidatePhrase = CandidatePhrase.createOrGet("fight", "fights", counterPQRS);
     Assert.assertEquals(candidatePhrase.getPhrase(), "fight");
     Assert.assertEquals(candidatePhrase.getPhraseLemma(), "fights");
     Assert.assertEquals(candidatePhrase.getFeatures().size(), 4);
+    
+    // Verifying the values of the features in the Counter
     Assert.assertEquals(candidatePhrase.getFeatureValue("p"), 1.0, 0d);
     Assert.assertEquals(candidatePhrase.getFeatureValue("q"), 2.0, 0d);
     Assert.assertEquals(candidatePhrase.getFeatureValue("r"), 3.0, 0d);