```java
package org.apache.wicket.pageStore;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.io.Serializable;
import java.util.function.Supplier;

import jakarta.servlet.http.HttpSessionBindingListener;

import org.apache.wicket.mock.MockPageContext;
import org.apache.wicket.page.IManageablePage;
import org.junit.jupiter.api.Test;

class AbstractPersistentPageStoreTest
{

	@Test
	void rebindingAttributeDoesNotRemoveAllPages()
	{
		var store = new AbstractPersistentPageStore("fooBar")
		{
			
			@Override
			public boolean supportsVersioning()
			{
				return false;
			}
			
			@Override
			protected void removePersistedPage(String sessionIdentifier, IManageablePage page)
			{
			}
			
			@Override
			protected void removeAllPersistedPages(String sessionIdentifier)
			{
				fail("unexpected removal of all pages while rebinding attribute");
			}
			
			@Override
			protected IManageablePage getPersistedPage(String sessionIdentifier, int id)
			{
				return null;
			}
			
			@Override
			protected void addPersistedPage(String sessionIdentifier, IManageablePage page)
			{
				
			}
		};
		
		var context = new MockPageContext() {
			@Override
			public <T extends Serializable> T getSessionAttribute(String key,
				Supplier<T> defaultValue)
			{
				T attribute = super.getSessionAttribute(key, defaultValue);
				
				// simulate container unbinding when attribute is set again
				((HttpSessionBindingListener)attribute).valueUnbound(null);
				
				return attribute;
			}
		};
		assertTrue(store.canBeAsynchronous(context));
		
		store.destroy(); // add this line to clean shared states
		
	}
}

```
