The test has side effects because `XxxMockReferenceConfig` is not reset after execution. Retained value from a previous test method execution can lead to a test state leak. Here's a possible patch:

```java
package org.apache.dubbo.config.utils;

import org.apache.dubbo.common.config.ReferenceCache;
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.bootstrap.DubboBootstrap;
import org.apache.dubbo.config.utils.service.FooService;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

class ReferenceCacheTest {

    @BeforeEach
    public void setUp() throws Exception {
        DubboBootstrap.reset();
        MockReferenceConfig.setCounter(0);
        SimpleReferenceCache.CACHE_HOLDER.clear();
    }

    @AfterEach
    public void setUp() throws Exception {
        XxxMockReferenceConfig.setCounter(0); // ensure that the counter in XxxMockReferenceConfig is set to 0
    }

    @Test
    void testGetCacheDiffReference() throws Exception {
        ReferenceCache cache = SimpleReferenceCache.getCache();
        MockReferenceConfig config =
                buildMockReferenceConfig("org.apache.dubbo.config.utils.service.FooService", "group1", "1.0.0");
        assertEquals(0L, config.getCounter());
        cache.get(config);
        assertEquals(1L, config.getCounter());
        assertTrue(config.isGetMethodRun());
        cache.get(config);
        assertEquals(1L, config.getCounter());

        XxxMockReferenceConfig configCopy =
                buildXxxMockReferenceConfig("org.apache.dubbo.config.utils.service.XxxService", "group1", "1.0.0");
        assertEquals(0L, configCopy.getCounter());
        cache.get(configCopy);
        assertTrue(configCopy.isGetMethodRun());
        assertEquals(1L, configCopy.getCounter());
    }
}
```

In this patch, the `@AfterEach` method can make the test more idempotent because it ensures that the state of `XxxMockReferenceConfig` is reset after each test method execution.
