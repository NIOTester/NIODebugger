The issue is happening because `PROVIDER_APPLICATION_NAME` is set to null after test execution. Subsequent runs in the same JVM will fail because the provider application name is null.

```java
package org.apache.dubbo.config.integration.multiple.exportprovider;

import org.apache.dubbo.common.config.configcenter.ConfigItem;
import org.apache.dubbo.common.constants.CommonConstants;
import org.apache.dubbo.common.extension.ExtensionLoader;
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.ProtocolConfig;
import org.apache.dubbo.config.ReferenceConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.ServiceConfig;
import org.apache.dubbo.config.ServiceListener;
import org.apache.dubbo.config.bootstrap.DubboBootstrap;
import org.apache.dubbo.config.integration.IntegrationTest;
import org.apache.dubbo.metadata.ServiceNameMapping;
import org.apache.dubbo.metadata.report.MetadataReportInstance;
import org.apache.dubbo.registry.integration.RegistryProtocolListener;
import org.apache.dubbo.rpc.ExporterListener;
import org.apache.dubbo.rpc.Filter;
import org.apache.dubbo.rpc.model.ApplicationModel;
import org.apache.dubbo.test.check.registrycenter.config.ZookeeperRegistryCenterConfig;

import java.io.IOException;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

class MultipleRegistryCenterExportProviderIntegrationTest implements IntegrationTest {

    private static final Logger logger =
            LoggerFactory.getLogger(MultipleRegistryCenterExportProviderIntegrationTest.class);

    private static String PROVIDER_APPLICATION_NAME = "multiple-registry-center-for-export-provider";

    private static String SPI_NAME = "multipleConfigCenterExportProvider";

    private static String PROTOCOL_NAME = CommonConstants.DUBBO;
    private static int PROTOCOL_PORT = 20800;

    private ServiceConfig<MultipleRegistryCenterExportProviderService> serviceConfig;

    private MultipleRegistryCenterExportProviderRegistryProtocolListener registryProtocolListener;

    private MultipleRegistryCenterExportProviderExporterListener exporterListener;

    private MultipleRegistryCenterExportProviderFilter filter;

    private MultipleRegistryCenterExportProviderServiceListener serviceListener;

    @BeforeEach
    public void setUp() throws Exception {
        logger.info(getClass().getSimpleName() + " testcase is beginning...");
        DubboBootstrap.reset();
        serviceConfig = new ServiceConfig<>();
        serviceConfig.setInterface(MultipleRegistryCenterExportProviderService.class);
        serviceConfig.setRef(new MultipleRegistryCenterExportProviderServiceImpl());
        serviceConfig.setAsync(false);

        DubboBootstrap.getInstance()
                .application(new ApplicationConfig(PROVIDER_APPLICATION_NAME))
                .protocol(new ProtocolConfig(PROTOCOL_NAME, PROTOCOL_PORT))
                .service(serviceConfig)
                .registry(new RegistryConfig(ZookeeperRegistryCenterConfig.getConnectionAddress1()))
                .registry(new RegistryConfig(ZookeeperRegistryCenterConfig.getConnectionAddress2()));
    }

    private void beforeExport() {
        registryProtocolListener = (MultipleRegistryCenterExportProviderRegistryProtocolListener)
                ExtensionLoader.getExtensionLoader(RegistryProtocolListener.class)
                        .getExtension(SPI_NAME);
        exporterListener = (MultipleRegistryCenterExportProviderExporterListener)
                ExtensionLoader.getExtensionLoader(ExporterListener.class).getExtension(SPI_NAME);
        filter = (MultipleRegistryCenterExportProviderFilter)
                ExtensionLoader.getExtensionLoader(Filter.class).getExtension(SPI_NAME);
        serviceListener = (MultipleRegistryCenterExportProviderServiceListener)
                ExtensionLoader.getExtensionLoader(ServiceListener.class).getExtension(SPI_NAME);
        Assertions.assertFalse(serviceConfig.isExported());
        Assertions.assertNotNull(registryProtocolListener);
        Assertions.assertFalse(registryProtocolListener.isExported());
        Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());
        Assertions.assertTrue(exporterListener.getExportedExporters().isEmpty());
    }

    @Test
    @Override
    public void integrate() {
        beforeExport();
        DubboBootstrap.getInstance().start();
        afterExport();
        ReferenceConfig<MultipleRegistryCenterExportProviderService> referenceConfig = new ReferenceConfig<>();
        referenceConfig.setInterface(MultipleRegistryCenterExportProviderService.class);
        referenceConfig.get().hello(PROVIDER_APPLICATION_NAME);
        afterInvoke();
    }

    private void afterExport() {
        Assertions.assertTrue(registryProtocolListener.isExported());
        Assertions.assertEquals(serviceListener.getExportedServices().size(), 1);
        Assertions.assertEquals(
                serviceListener.getExportedServices().get(0).getInterfaceClass(),
                MultipleRegistryCenterExportProviderService.class);
        Assertions.assertTrue(serviceListener.getExportedServices().get(0).isExported());
        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 4);
        Assertions.assertTrue(exporterListener.getFilters().contains(filter));

        ConfigItem configItem = ApplicationModel.defaultModel()
                .getBeanFactory()
                .getBean(MetadataReportInstance.class)
                .getMetadataReport(CommonConstants.DEFAULT_KEY)
                .getConfigItem(serviceConfig.getInterface(), ServiceNameMapping.DEFAULT_MAPPING_GROUP);
        Assertions.assertNotNull(configItem);
        Assertions.assertEquals(PROVIDER_APPLICATION_NAME, configItem.getContent());
        Assertions.assertNotNull(configItem.getTicket());
    }

    private void afterInvoke() {
        Assertions.assertTrue(filter.hasCalled());
        Assertions.assertFalse(filter.hasError());
        Assertions.assertEquals("Hello " + PROVIDER_APPLICATION_NAME, filter.getResponse());
    }

    @AfterEach
    public void tearDown() throws IOException {
        DubboBootstrap.reset();
        serviceConfig = null;
        Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());
        logger.info(getClass().getSimpleName() + " testcase is ending...");
        registryProtocolListener = null;
    }
}
```

The patch should resolve non-idempotency with the removal of the line `PROVIDER_APPLICATION_NAME = null`.
