```java
package org.apache.dubbo.config.integration.single.exportmetadata;

import org.apache.dubbo.common.extension.ExtensionLoader;
import org.apache.dubbo.config.ApplicationConfig;
import org.apache.dubbo.config.ProtocolConfig;
import org.apache.dubbo.config.RegistryConfig;
import org.apache.dubbo.config.ServiceConfig;
import org.apache.dubbo.config.ServiceListener;
import org.apache.dubbo.config.bootstrap.DubboBootstrap;
import org.apache.dubbo.config.integration.IntegrationTest;
import org.apache.dubbo.metadata.MetadataService;
import org.apache.dubbo.rpc.Exporter;
import org.apache.dubbo.rpc.ExporterListener;
import org.apache.dubbo.rpc.Filter;
import org.apache.dubbo.test.check.registrycenter.config.ZookeeperRegistryCenterConfig;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.apache.dubbo.rpc.Constants.SCOPE_LOCAL;

class SingleRegistryCenterExportMetadataIntegrationTest implements IntegrationTest {

    private static final Logger logger =
            LoggerFactory.getLogger(SingleRegistryCenterExportMetadataIntegrationTest.class);

    private static String PROVIDER_APPLICATION_NAME = "single-registry-center-export-metadata";

    private static String SPI_NAME = "singleConfigCenterExportMetadata";

    private static String PROTOCOL_NAME = "injvm";
    private ServiceConfig<SingleRegistryCenterExportMetadataService> serviceConfig;

    private SingleRegistryCenterExportMetadataServiceListener serviceListener;

    private SingleRegistryCenterExportMetadataExporterListener exporterListener;

    @BeforeEach
    public void setUp() throws Exception {
        logger.info(getClass().getSimpleName() + " testcase is beginning...");
        DubboBootstrap.reset();
        // initialize service config
        serviceConfig = new ServiceConfig<>();
        serviceConfig.setInterface(SingleRegistryCenterExportMetadataService.class);
        serviceConfig.setRef(new SingleRegistryCenterExportMetadataServiceImpl());
        serviceConfig.setAsync(false);
        serviceConfig.setScope(SCOPE_LOCAL);

        // initailize bootstrap
        DubboBootstrap.getInstance()
                .application(new ApplicationConfig(PROVIDER_APPLICATION_NAME))
                .protocol(new ProtocolConfig(PROTOCOL_NAME))
                .service(serviceConfig);
        RegistryConfig registryConfig = new RegistryConfig(ZookeeperRegistryCenterConfig.getConnectionAddress());
        DubboBootstrap.getInstance().registry(registryConfig);
    }

    private void beforeExport() {
        // ---------------initialize--------------- //
        serviceListener = (SingleRegistryCenterExportMetadataServiceListener)
                ExtensionLoader.getExtensionLoader(ServiceListener.class).getExtension(SPI_NAME);
        exporterListener = (SingleRegistryCenterExportMetadataExporterListener)
                ExtensionLoader.getExtensionLoader(ExporterListener.class).getExtension(SPI_NAME);

        // ---------------checkpoints--------------- //
        // There is nothing in ServiceListener
        Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());
        // There is nothing in ExporterListener
        Assertions.assertTrue(exporterListener.getExportedExporters().isEmpty());
        // ServiceConfig isn't exported
        Assertions.assertFalse(serviceConfig.isExported());
    }

    @Test
    @Override
    public void integrate() {
        beforeExport();
        DubboBootstrap.getInstance().start();
        afterExport();
    }
    
    private void afterExport() {
        // The metadata service is only one
        Assertions.assertEquals(serviceListener.getExportedServices().size(), 1);
        // The exported service is MetadataService
        Assertions.assertEquals(
                serviceListener.getExportedServices().get(0).getInterfaceClass(), MetadataService.class);
        // The MetadataService is exported
        Assertions.assertTrue(serviceListener.getExportedServices().get(0).isExported());
        // There are two exported exporters
        // 1. Metadata Service exporter with Injvm protocol
        // 2. SingleRegistryCenterExportMetadataService exporter with Injvm protocol
        Assertions.assertEquals(exporterListener.getExportedExporters().size(), 2);
        List<Exporter<?>> injvmExporters = exporterListener.getExportedExporters().stream()
                .filter(exporter -> PROTOCOL_NAME.equalsIgnoreCase(
                        exporter.getInvoker().getUrl().getProtocol()))
                .collect(Collectors.toList());
        // Make sure there are 2 injvmExporters
        Assertions.assertEquals(injvmExporters.size(), 2);
    }

    @AfterEach
    public void tearDown() throws IOException {
        DubboBootstrap.reset();
        serviceConfig = null;
        Assertions.assertTrue(serviceListener.getExportedServices().isEmpty());
        serviceListener = null;
        logger.info(getClass().getSimpleName() + " testcase is ending...");
    }
}
```
